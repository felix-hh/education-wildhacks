# -*- coding: utf-8 -*-
"""data_pipeline_canvas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OeFBRkI_LmkDCPEQnvKzQ0x6iSc1hg3R

Download files and syllabus - naive implementation

import requests
import json

# Set up API endpoint and headers
base_url = 'https://canvas.instructure.com/api/v1'
headers = {'Authorization': 'Bearer 1876~aWVdSMj0dQFyAGsSd1EvYKCwE7fB4ZERmOIJpqv2KvuHukhDFJpqpwHG0QnfRuzD'}

# Get list of courses
courses_url = f'{base_url}/courses'
courses_response = requests.get(courses_url, headers=headers)
courses = json.loads(courses_response.text)

# Select the course you want to access
course_id = None
for course in courses:
    print(course['name'])
    if course['name'] == 'ASTRON 321 Observational Astronomy':
        course_id = course['id']
        break

# Query for course files
files_url = f'{base_url}/courses/{course_id}/files'
files_response = requests.get(files_url, headers=headers)
files = json.loads(files_response.text)

# Download filesd
for file in files:
    if 'syllabus' in file['filename'] or 'Syllabus' in file['filename']:
        file_url = file['url']
        file_name = file['filename']
        print(f'Syllabus file found at {file_name}')
        file_response = requests.get(file_url, headers=headers)
        with open(file_name, 'wb') as f:
            f.write(file_response.content)
        break

import requests

# Set up API endpoint and headers
base_url = 'https://canvas.instructure.com/api/v1'
headers = {'Authorization': 'Bearer 1876~aWVdSMj0dQFyAGsSd1EvYKCwE7fB4ZERmOIJpqv2KvuHukhDFJpqpwHG0QnfRuzD'}

# Get list of courses
courses_url = f'{base_url}/courses'
courses_response = requests.get(courses_url, headers=headers)
courses = courses_response.json()

# Select the course you want to access
course_id = None
for course in courses:
    if course['name'] == 'PHYS 416 Statistical Mechanics':
        course_id = course['id']
        break

# Download syllabus
syllabus_url = f'{base_url}/courses/{course_id}/syllabus_body'
syllabus_response = requests.get(syllabus_url, headers=headers)
syllabus = syllabus_response.text

# Save syllabus to a file
with open('syllabus.txt', 'w') as f:
    f.write(syllabus)
"""

pip install boto3

"""Pull syllabus, assignment feedback, and any other files and information such as grades using the Canvas API and its multiple endpoints via the access token. This is then pushed to AWS s3 for further processing."""

import os
import boto3
import requests

# Replace with your AWS access key and secret key
aws_access_key_id = 'YOUR-AWS-ACCESS-KEY'
aws_secret_access_key = 'YOUR-ACCESS-KEY-SECRET'
# Replace with your Canvas API token
api_key = 'YOUR-CANVAS-TOKEN'
# Replace with your Canvas course name; for multiple classes, we can write a loop and run this code across all valid courses
course_name = 'COURSE OF INTEREST'
# Replace with your base URL
base_url = 'https://canvas.<YOUR-INSTITUTION-DOMAN>'

def get_courses(url, headers):
    all_courses = []
    page = 1
    while True:
        params = {'page': page, 'per_page': 50}
        response = requests.get(url, headers=headers, params=params)
        courses = response.json()

        if not courses:
            break

        all_courses.extend(courses)
        page += 1

    return all_courses

url = f'{base_url}/api/v1/courses'
headers = {'Authorization': f'Bearer {api_key}'}

print('Fetching your courses...')
courses = get_courses(url, headers)
course_index = None
for i, course in enumerate(courses):
    try:
        print(f"{i + 1}: {course['name']}")
        if course['name'] == course_name:
            course_index = i+1
            break
    except:
        continue

course_selection = course_index
course_id = courses[course_selection - 1]['id']

# Construct the API request URL
url = f'{url}/{course_id}?include[]=syllabus_body'

# Set up the headers with the API key
headers = {
    'Authorization': f'Bearer {api_key}'
}

# Send a GET request to the constructed URL
response = requests.get(url, headers=headers)

# Check if the request is successful
if response.status_code == 200:
    # Parse the JSON response
    course_data = response.json()
    
    # Retrieve the syllabus information
    syllabus_body = course_data.get('syllabus_body', None)
    
    if syllabus_body is not None:
        print("Syllabus information:")
        print(syllabus_body)
        # Save syllabus to a file
        with open('syllabus.txt', 'w') as f:
            f.write(syllabus_body)
    else:
        print("No syllabus information available for this course.")
else:
    print(f"Error: {response.status_code}")

"""To download assignment feedback"""

# Construct the API request URL
url = f'{base_url}/api/v1/courses/{course_id}/assignments'

# Set up the headers with the API key
headers = {
    'Authorization': f'Bearer {api_key}'
}

# Send a GET request to the constructed URL
response = requests.get(url, headers=headers)

# Check if the request is successful
if response.status_code == 200:
    print('Fetching your courses...')
    assignments = response.json()
    for i, assignment in enumerate(assignments):
        try:
            print(f"{i + 1}: {assignment['name']}")
        except:
            continue
else:
    print(f"Error: {response.status_code}")

assignment_selection = int(input('Select the assignment number to download the feedback: '))
assignment_id = assignments[assignment_selection - 1]['id']

# Construct the API request URL
url = f'{base_url}/api/v1/users/self'

# Set up the headers with the API key
headers = {
    'Authorization': f'Bearer {api_key}'
}

# Send a GET request to the constructed URL
response = requests.get(url, headers=headers)

# Check if the request is successful
if response.status_code == 200:
    # Parse the JSON response
    user_data = response.json()

    # Retrieve the user ID
    user_id = user_data.get('id', None)

    if user_id is not None:
        print(f"Your user ID is: {user_id}")
    else:
        print("User ID not found.")
else:
    print(f"Error: {response.status_code}")

def download_file(url, local_filename):
    with requests.get(url, headers=headers, stream=True) as r:
        r.raise_for_status()
        with open(local_filename, 'wb') as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)

# Construct the API request URL
url = f'{base_url}/api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}?include[]=submission_comments'

# Set up the headers with the API key
headers = {
    'Authorization': f'Bearer {api_key}'
}

# Send a GET request to the constructed URL
response = requests.get(url, headers=headers)

# Check if the request is successful
if response.status_code == 200:
    # Parse the JSON response
    submission = response.json()

    # Retrieve the feedback
    feedback = submission.get('submission_comments', [])

    if feedback:
        print("Feedback from the instructor:")
        _feedback = ''
        for comment in feedback:
            print(comment['comment'])
            _feedback += comment['comment']
        text_file = open("assignment_feedback.txt", "w")
        n = text_file.write(_feedback)
        text_file.close()
    else:
        print("No feedback available for this assignment.")
else:
    print(f"Error: {response.status_code}")

"""import requests
import os

def download_file(url, local_filename):
    with requests.get(url, headers=headers, stream=True) as r:
        r.raise_for_status()
        with open(local_filename, 'wb') as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)

# Replace with the file ID and desired local filename
local_filename = 'feedback.pdf'

# Construct the API request URL
url = f'https://canvas.northwestern.edu/files/{135775}/download'

# Set up the headers with the API key
headers = {
    'Authorization': f'Bearer {api_key}'
}

# Download the file
print(f"Downloading file: {local_filename}")
download_file(url, local_filename)
print(f"Downloaded file to: {local_filename}")

def download_file(url, local_filename):
    with requests.get(url, headers=headers, stream=True) as r:
        r.raise_for_status()
        with open(local_filename, 'wb') as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)

# Construct the API request URL
url = f'{base_url}/api/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{18760000000200512}?include[]=submission_comments'

# Set up the headers with the API key
headers = {
    'Authorization': f'Bearer {api_key}'
}

# Send a GET request to the constructed URL
response = requests.get(url, headers=headers)

# Check if the request is successful
if response.status_code == 200:
    # Parse the JSON response
    submission = response.json()

    print(submission)

    # Retrieve the feedback
    feedback = submission.get('submission_comments', [])

    if feedback:
        print("Feedback from the instructor:")
        for comment in feedback:
            print(comment['comment'])
    else:
        print("No feedback available for this assignment.")
else:
    print(f"Error: {response.status_code}")
"
"""

# Create a session with your access and secret keys
session = boto3.Session(
    aws_access_key_id=aws_access_key_id,
    aws_secret_access_key=aws_secret_access_key,
)

# Create an S3 client using the session
s3 = session.client('s3')

# Set the file path and S3 bucket name

for file in os.listdir():
    if 'txt' in file:
        file_path = file
        bucket_name = 'wildhacks2023'

        # Upload the file to the bucket
        with open(file_path, 'rb') as file_data:
            s3.upload_fileobj(file_data, bucket_name, file_path)

        print(f"{file_path} uploaded to {bucket_name}.")